cmake_minimum_required(VERSION 3.5)
project(pq2)

set(VERSION_NUMBER 1.0)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(PLATFORM_GUIS GUI_WINFORMS)
    set(DEFAULT_GUI GUI_WINFORMS)
    option(WINFORMS_ENABLED "Enable Winforms interface" ON)
    set(COCOA_ENABLED OFF)
    set(NCURSES_ENABLED "Enable NCurses interface" OFF)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(PLATFORM_GUIS GUI_COCOA GUI_NCURSES)
    set(DEFAULT_GUI GUI_COCOA)
    option(COCOA_ENABLED "Enable Cocoa interface" ON)
    option(NCURSES_ENABLED "Enable NCurses interface" OFF)
    set(WINFORMS_ENABLED OFF)
else()
    set(PLATFORM_GUIS GUI_NCURSES)
    set(DEFAULT_GUI GUI_QT)
    option(NCURSES_ENABLED "Enable NCurses interface" ON)
    set(WINFORMS_ENABLED OFF)
    set(COCOA_ENABLED OFF)
endif ()
set(DEFAULT_GUI_LIBRARY ${DEFAULT_GUI} CACHE STRING "GUI library to use")
set_property(CACHE DEFAULT_GUI_LIBRARY PROPERTY STRINGS GUI_NONE GUI_QT GUI_GTK ${PLATFORM_GUIS})
option(QT_ENABLED "Enable QT interface" ON)
option(GTK_ENABLED "Enable GTK interface" ON)
option(WEBSERVER_ENABLED "Enable Webserver interface" OFF)

if(${QT_ENABLED} OR ${GTK_ENABLED} OR ${WINFORMS_ENABLED} OR ${COCOA_ENABLED} OR ${NCURSES_ENABLED})
    add_subdirectory(gui)
    set(GUI_LIBS pq2gui)
    set(GUI_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/gui)
    set(GUI_ENABLED ON)
    if (${QT_ENABLED})
        add_subdirectory(qt)
        set(GUI_LIBS ${GUI_LIBS} pq2qt)
        set(GUI_INCLUDES ${GUI_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/qt)
    endif ()
    if(${GTK_ENABLED})
#        add_subdirectory(pq2gtk)
#        set(GUI_LIBS ${GUI_LIBS} pq2gtk)
#        set(GUI_INCLUDES ${GUI_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/pq2gtk)
    endif ()
    if(${WINFORMS_ENABLED})
#        add_subdirectory(pq2winforms)
#        set(GUI_LIBS ${GUI_LIBS} pq2winforms)
#        set(GUI_INCLUDES ${GUI_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/pq2winforms)
    endif ()
    if(${COCOA_ENABLED})
#        add_subdirectory(pq2cocoa)
#        set(GUI_LIBS ${GUI_LIBS} pq2cocoa)
#        set(GUI_INCLUDES ${GUI_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/pq2cocoa)
    endif ()
    if(${NCURSES_ENABLED})
        add_subdirectory(ncurses)
        set(GUI_LIBS ${GUI_LIBS} pq2ncurses)
        set(GUI_INCLUDES ${GUI_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/ncurses)
    endif ()
else()
    set(GUI_ENABLED OFF)
endif()

# make sure the default gui is enabled
if ((${DEFAULT_GUI_LIBRARY} MATCHES GUI_QT) AND (NOT ${QT_ENABLED}))
    message(FATAL_ERROR "ERROR: DEFAULT_GUI_LIBRARY can't be set to GUI_QT when QT_ENABLED is OFF")
elseif((${DEFAULT_GUI_LIBRARY} MATCHES GUI_GTK) AND (NOT ${GTK_ENABLED}))
    message(FATAL_ERROR "ERROR: DEFAULT_GUI_LIBRARY can't be set to GUI_GTK when GTK_ENABLED is OFF")
elseif((${DEFAULT_GUI_LIBRARY} MATCHES GUI_COCOA) AND (NOT ${COCOA_ENABLED}))
    message(FATAL_ERROR "ERROR: DEFAULT_GUI_LIBRARY can't be set to GUI_COCOA when COCOA_ENABLED is OFF")
elseif((${DEFAULT_GUI_LIBRARY} MATCHES GUI_WINFORMS) AND (NOT ${WINFORMS_ENABLED}))
    message(FATAL_ERROR "ERROR: DEFAULT_GUI_LIBRARY can't be set to GUI_WINFORMS when WINFORMS_ENABLED is OFF")
elseif((${DEFAULT_GUI_LIBRARY} MATCHES GUI_NCURSES) AND (NOT ${NCURSES_ENABLED}))
    message(FATAL_ERROR "ERROR: DEFAULT_GUI_LIBRARY can't be set to GUI_NCURSES when NCURSES_ENABLED is OFF")
endif()

if(${WEBSERVER_ENABLED})
#    add_subdirectory(pq2webserver)
#    set(WEBSERVER_LIBS pq2webserver)
#    set(WEBSERVER_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/pq2webserver)
endif()

configure_file(config.h.in config.h @ONLY)

set(SOURCE_FILES main.cpp)
add_executable(pq2 ${SOURCE_FILES})

add_subdirectory(game)
add_subdirectory(utils)

target_link_libraries(pq2 pq2game pq2utils ${GUI_LIBS} ${WEBSERVER_LIBS})
include_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/game ${CMAKE_CURRENT_SOURCE_DIR}/utils ${CMAKE_CURRENT_SOURCE_DIR}/includes ${GUI_INCLUDES} ${WEBSERVER_INCLUDES})